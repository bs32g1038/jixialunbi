generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int               @id @default(autoincrement())
  account        String            @unique
  username       String?
  email          String?
  about          String?
  image          String?
  password       String
  role           String?           @default("user")
  banned         Boolean           @default(false)
  isActived      Boolean           @default(false)
  commentCount   Int               @default(0)
  postCount      Int               @default(0)
  likeCount      Int               @default(0)
  followingCount Int               @default(0)
  followersCount Int               @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  posts          Post[]
  participants   PostParticipant[]
  comments       Comment[]
  likes          Like[]
  collections    Collection[]
}

model Post {
  id           Int               @id @default(autoincrement())
  title        String
  categoryId   Int
  authorId     Int?
  tags         String?           @default("")
  pinned       Boolean           @default(false)
  good         Boolean           @default(false)
  locked       Boolean           @default(false)
  commentCount Int               @default(0)
  collectCount Int               @default(0)
  likeCount    Int               @default(0)
  type         Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now())
  author       User?             @relation(fields: [authorId], references: [id])
  category     Category          @relation(fields: [categoryId], references: [id])
  participants PostParticipant[]
  comments     Comment[]
  likes        Like[]
  collections  Collection[]
  deleted      DateTime?
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @default("")
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Post        Post[]
}

model PostParticipant {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Comment {
  id            Int       @id @default(autoincrement())
  content       String
  postId        Int
  post          Post?     @relation(fields: [postId], references: [id])
  author        User?     @relation(fields: [authorId], references: [id])
  authorId      Int
  parentId      Int?
  replyId       Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  comment       Comment?  @relation("parentComment", fields: [parentId], references: [id])
  comments      Comment[] @relation("parentComment")
  replyComment  Comment?  @relation("replyComment", fields: [replyId], references: [id])
  replyComments Comment[] @relation("replyComment")
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Collection {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Notification {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  targetId   Int
  type       Int // 1. 系统通知
  title      String
  content    String
  read       Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}
